version: '2'

# We have loaded the variables specified in the manifest, the defaults
# and in the per-arc/target/image-type includes. We can now do optional
# things that depend on what was set in that.

mpp-vars:
  # Backwards compatibility by checking if the deprecated kernel_rpm variable is set
  kernel_core_package:
    mpp-if: locals().get('kernel_rpm')
    then:
      mpp-eval: kernel_rpm + "-core"
    else:
      mpp-eval: kernel_package + "-core"
  kernel_rpm:
    mpp-if: locals().get('kernel_rpm')
    then:
      mpp-eval: kernel_rpm
    else:
      mpp-eval: kernel_package if not kernel_version else kernel_package + "-" + kernel_version
  use_debug:
    mpp-if: "'debug' in locals().get('kernel_package')"
    then: true
  fstab:
    mpp-join:
    - - uuid:
          mpp-eval: rootfs_uuid
        vfs_type: ext4
        path: /
        freq: 1
        passno: 1
      - mpp-if: use_efipart
        then:
          label: ESP
          vfs_type: vfat
          path: /boot/efi
          freq: 1
          passno: 1
      - mpp-if: use_bootpart
        then:
          uuid:
            mpp-eval: bootfs_uuid
          vfs_type: ext4
          path: /boot
          freq: 1
          passno: 1
    - mpp-eval: extra_fstab
  build_rpms:
    mpp-join:
    - mpp-eval: build_rpms
    - - mpp-if: use_luks
        then: cryptsetup
      - mpp-if: use_luks
        then: lvm2
      - mpp-if: use_aboot
        then: aboot-update
      - mpp-if: use_aboot
        then: aboot-deploy
  boot_rpms:
    mpp-join:
    - mpp-eval: boot_rpms
    - - $kernel_rpm
  base_rpms:
    mpp-join:
    - mpp-eval: base_rpms
    - - $linux_firmware_rpm
      - mpp-if: use_luks
        then: lvm2
      - mpp-if: use_aboot
        then: aboot-update
      - mpp-if: use_aboot
        then: aboot-deploy
  dracut_omit_modules:
    mpp-join:
    - mpp-eval: dracut_omit_modules
    - - mpp-if: not use_luks
        then: dm
  kernel_opts:
    mpp-join:
    - mpp-eval: kernel_opts
    - mpp-if: use_serial_console
      then:
        - console=$serial_console
  image_repos:
    mpp-join:
      - mpp-eval: distro_repos
      - mpp-eval: target_repos
  image_devel_repos:
    mpp-join:
      - mpp-eval: distro_devel_repos
  containers_storage_conf:
    mpp-format-string: |
      [storage]
      driver = "overlay"
      runroot = "/run/containers/storage"
      graphroot = "/var/lib/containers/storage"
      { "transient_store = true" if containers_transient_store else "" }

      [storage.options]
      additionalimagestores = [
         "{containers_extra_store}"
      ]

      [storage.options.overlay]
      mountopt = "nodev,metacopy=on"
  containers_conf:
    mpp-format-string: |
      [containers]
      { "read_only = true" if containers_read_only else "" }
  image_enabled_services:
    mpp-join:
      - mpp-eval: image_enabled_services
      - - mpp-if: use_containers and containers_transient_store
          then: podman-clean-transient.service
  build_info:
    mpp-format-string: |
      RELEASE="{release_name}"
      UUID="{image_uuid}"
      TIMESTAMP="{build_timestamp}"
      IMAGE_NAME="{image_type}"
      IMAGE_TARGET="{target}"


pipelines: []
