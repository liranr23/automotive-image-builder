#!/usr/bin/env python3

import argparse
import sys
import os
import platform
import subprocess
import json
import shlex
import tempfile

is_verbose = False
def print_verbose(s):
    if is_verbose:
        print(s)
base_dir = "/usr/lib/automotive-image-builder"
include_dirs = []


def print_error(s):
    print(s, file=sys.stderr)

def exit_error(s):
    print_error("Error: " + s)
    sys.exit(1)

def ostree_repo_init(path):
    if not os.path.isdir(path):
        print_verbose(f"Initializing repo {path}")
        subprocess.run(["ostree", "init", "--repo", path, "--mode", "archive"], check=True)

def ostree_refs(path):
    r = subprocess.run(["ostree", "refs", "--repo", path], capture_output=True, check=True)
    out = r.stdout.decode("utf-8").rstrip()
    if out:
        return out.split("\n")
    return []

def ostree_rev_parse(path, ref):
    r = subprocess.run(["ostree", "rev-parse", "--repo", path, ref], capture_output=True, check=True)
    return r.stdout.decode("utf-8").rstrip()

def list_dist(args, tmpdir):
    distros = set()
    for inc in include_dirs:
        for f in os.listdir(os.path.join(inc, "distro")):
            if f.endswith(".ipp.yml"):
                distros.add(f[:-8])
    for d in sorted(distros):
        print(d)

def list_targets(args, tmpdir):
    targets = set()
    for inc in include_dirs:
        for f in os.listdir(os.path.join(inc, "targets")):
            if f.endswith(".ipp.yml"):
                targets.add(f[:-8])
    for d in sorted(targets):
        print(d)

def run(cmdline, sudo=False):

    if sudo:
        cmdline = ["sudo"] + cmdline

    print_verbose("Running: " + shlex.join(cmdline))

    try:
        subprocess.run(cmdline, check=True)
    except subprocess.CalledProcessError:
        sys.exit(1) # cmd will have printed the error

def create_osbuild_manifest(args, manifest, out):
    defines = {
        "_basedir": base_dir,
        "arch": args.arch,
        "target": args.target,
        "image_type": args.image_type,
    }

    if args.ostree_repo:
        ostree_repo_init(args.ostree_repo)
        revs = {}
        for ref in ostree_refs(args.ostree_repo):
            rev = ostree_rev_parse(args.ostree_repo, ref)
            revs[ref] = rev
            defines["ostree_parent_refs"] = revs

    for d in args.define:
        parts = d.split("=", 2)
        if len(parts) != 2:
            exit_error ("Invalid define '" + d + "', should be key=$VALUE")
        k = parts[0]
        try:
            v = json.loads(parts[1])
        except json.decoder.JSONDecodeError as e:
            exit_error ("Invalid json value '" + parts[1] + "': " + str(e))
        defines[k] = v

    cmdline = [ args.osbuild_mpp ]
    for inc in include_dirs:
        cmdline += [ "-I", inc ]

    for k in sorted(defines.keys()):
        v = defines[k]
        cmdline += [ "-D", f'{k}={json.dumps(v)}' ]

    for arg in args.mpp_arg:
        cmdline += [ arg ]

    cmdline += [ manifest, out ]

    run(cmdline)

def compose(args, tmpdir):
    return create_osbuild_manifest(args, args.manifest, args.out)

export_datas = {
    "qcow2": {
        "filename": "disk.qcow2"
    },
    "image": {
        "filename": "disk.img"
    },
    "ostree-commit": {
        "filename": "repo",
        "is_dir": True,
    },
    "container": {
        "filename": "container.tar"
    },
    "ostree-oci-image": {
        "filename": "image.oci-archive"
    },
    "rootfs": {
        "filename": None,
        "is_dir": True,
        "no_chown": True
    },
    "ext4": {
        "filename": "rootfs.ext4"
    },
    "tar": {
        "filename": "rootfs.tar"
    },
    "aboot": {
        "filename": "images",
        "is_dir": True,
    },
    "rpmlist": {
        "filename": "rpmlist"
    }
}

def get_export_data(exp):
    if exp in export_datas:
        return export_datas[exp]
    exit_error (f"Unsupported export '{exp}'")

def export(args, outputdir, dest, dest_is_directory, export):
    exportdir = os.path.join(outputdir, export)
    data = get_export_data(export)

    filename = data["filename"]
    if filename:
        export_file = os.path.join(exportdir, filename)
    else:
        export_file = os.path.join(exportdir)

    if dest_is_directory:
        dest = os.path.join(dest, os.path.basename(export_file))

    if data.get("is_dir", False):
        # The mv won't replace existing destination, so first remove it
        if os.path.isdir(dest) or os.path.isfile(dest):
            run(["rm", "-rf", dest], args.sudo)

    if not data.get("no_chown", False):
        run(["chown", f"{os.getuid()}:{os.getgid()}", export_file], args.sudo)

    run(["mv", export_file, dest], args.sudo)

def build(args, tmpdir):
    if args.nosudo:
        args.sudo=False

    osbuild_manifest = os.path.join(tmpdir, "osbuild.json")
    if args.osbuild_manifest:
        osbuild_manifest = args.osbuild_manifest

    create_osbuild_manifest(args, args.manifest, osbuild_manifest)

    builddir = tmpdir
    if args.build_dir:
        builddir = args.build_dir

    cmdline = [ "osbuild" ]

    outputdir = os.path.join(builddir, "image_output")
    cmdline += [ "--store", os.path.join(builddir, "osbuild_store"),
                 "--output-directory",  outputdir]

    for arg in args.osbuild_arg:
        cmdline += [ arg ]

    if args.build_dir:
        # Cache stuff between builds
        cmdline += [ "--checkpoint", "build"]

    if args.cache_max_size:
        cmdline += [ "--cache-max-size=" + args.cache_max_size]

    has_repo=False
    for exp in args.export:
        if exp == "ostree-commit":
            has_repo=True
        cmdline += ["--export", exp]

    # If ostree repo was specified, also export it if needed
    if not has_repo and args.ostree_repo:
        cmdline += ["--export", "ostree-commit"]

    cmdline += [ osbuild_manifest ]

    run(cmdline, args.sudo)

    if len(args.export) == 1:
        # Export directly to args.out
        export(args, outputdir, args.out, False, args.export[0])
    else:
        if os.path.isdir(args.out) or os.path.isfile(args.out):
            run(["rm", "-rf", args.out], args.sudo)
        os.mkdir(args.out)
        for exp in args.export:
            export(args, outputdir, args.out, True, exp)

    if args.ostree_repo:
        repodir = os.path.join(outputdir, "ostree-commit/repo")
        run(["ostree", "pull-local",  "--repo=" + args.ostree_repo, repodir])

    run(["rm", "-rf", outputdir], args.sudo)

def no_subcommand(args):
    print ("No subcommand specified")

def main():
    isRoot = os.getuid() == 0

    parser = argparse.ArgumentParser(description="Build automotive images")
    parser.add_argument("--verbose", default=False, action="store_true")
    parser.add_argument("--include", action="append",type=str,default=[],
                        help=f"Add include directory")
    parser.set_defaults(func=no_subcommand)
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_list_dist = subparsers.add_parser('list-dist', help='list available distributions')
    parser_list_dist.set_defaults(func=list_dist)

    parser_list_dist = subparsers.add_parser('list-targets', help='list available targets')
    parser_list_dist.set_defaults(func=list_targets)

    format_parser = argparse.ArgumentParser(add_help=False)
    format_parser.add_argument("--arch", default=platform.machine(), action="store",
                        help=f"Arch to run for (default {platform.machine()})")
    format_parser.add_argument("--osbuild-mpp", action="store",type=str,default="osbuild-mpp",
                        help=f"Use this osbuild-mpp binary")
    format_parser.add_argument("--target", action="store",type=str,default="qemu",
                        help=f"Build for this target")
    format_parser.add_argument("--image-type", action="store",type=str,default="regular",
                        help=f"Build this image type (regular, ostree)")
    format_parser.add_argument("--distro", action="store",type=str,default="cs9",
                        help=f"Build for this distro specification")
    format_parser.add_argument("--mpp-arg", action="append",type=str,default=[],
                        help=f"Add custom mpp arg")
    format_parser.add_argument("--define", action="append",type=str,default=[],
                        help=f"Define key=json-value")
    format_parser.add_argument("--ostree-repo", action="store",type=str,
                        help=f"Path to ostree repo")

    parser_compose = subparsers.add_parser('compose', help='Compose osbuild manifest', parents=[format_parser])
    parser_compose.add_argument("manifest", type=str, help="Source manifest file")
    parser_compose.add_argument("out", type=str, help="Output osbuild json")
    parser_compose.set_defaults(func=compose)

    parser_build = subparsers.add_parser('build', help='Compose osbuild manifest', parents=[format_parser])
    parser_build.add_argument("--osbuild-manifest", action="store",type=str,
                        help=f"Path to store osbuild manifest")
    parser_build.add_argument("--cache-max-size", action="store",type=str,
                        help=f"Max cache size")
    parser_build.add_argument("--osbuild-arg", action="append",type=str,default=[],
                        help=f"Add custom osbuil arg")
    parser_build.add_argument("--sudo", default=not isRoot, action="store_true")
    parser_build.add_argument("--nosudo", default=False, action="store_true")
    parser_build.add_argument("--export", action="append",type=str,default=[],
                        help=f"Export this image type")
    parser_build.add_argument("--build-dir", action="store",type=str,
                        help=f"Directory where intermediary files are stored)")


    parser_build.add_argument("manifest", type=str, help="Source manifest file")
    parser_build.add_argument("out", type=str, help="Output path")
    parser_build.set_defaults(func=build)

    args = parser.parse_args(sys.argv[1:])

    global is_verbose
    is_verbose = args.verbose

    global base_dir
    bin_dir = os.path.dirname(os.path.realpath(__file__))
    if os.path.isfile(os.path.join(bin_dir, ".fromsrc")):
        base_dir = bin_dir;
    global include_dirs
    include_dirs = [ base_dir ] + args.include

    with tempfile.TemporaryDirectory(prefix="automotive-image-builder-", dir="/var/tmp") as tmpdir:
        return args.func(args, tmpdir)

if __name__ == "__main__":
    sys.exit(main())
